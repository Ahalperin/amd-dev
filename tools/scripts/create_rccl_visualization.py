#!/usr/bin/env python3

"""
RCCL Profiling Visualization Script
Creates simple visualizations from RCCL profiling CSV data without requiring pandas
"""

import json
import csv
import sys
import os
from pathlib import Path

def create_simple_html_visualization(csv_file, output_file):
    """Create a simple HTML visualization from CSV data"""
    
    # Read CSV data
    kernels = []
    try:
        with open(csv_file, 'r') as f:
            reader = csv.DictReader(f)
            for row in reader:
                if 'KernelName' in row and 'DurationNs' in row:
                    try:
                        duration_ms = float(row['DurationNs']) / 1000000.0
                        kernels.append({
                            'name': row['KernelName'],
                            'duration': duration_ms,
                            'start': float(row.get('BeginNs', 0)) / 1000000.0
                        })
                    except (ValueError, KeyError):
                        continue
    except FileNotFoundError:
        print(f"Error: File {csv_file} not found")
        return False
    
    if not kernels:
        print("No kernel data found in CSV file")
        return False
    
    # Sort by duration
    kernels.sort(key=lambda x: x['duration'], reverse=True)
    
    # Create HTML visualization
    html_content = f"""
<!DOCTYPE html>
<html>
<head>
    <title>RCCL Profiling Results</title>
    <style>
        body {{ font-family: Arial, sans-serif; margin: 20px; }}
        .header {{ background-color: #f0f0f0; padding: 10px; border-radius: 5px; }}
        .kernel-bar {{ margin: 2px 0; }}
        .bar {{ background-color: #4CAF50; height: 20px; display: inline-block; }}
        .kernel-name {{ font-size: 12px; margin-left: 5px; }}
        table {{ border-collapse: collapse; width: 100%; margin-top: 20px; }}
        th, td {{ border: 1px solid #ddd; padding: 8px; text-align: left; }}
        th {{ background-color: #f2f2f2; }}
    </style>
</head>
<body>
    <div class="header">
        <h1>üöÄ RCCL Profiling Results Visualization</h1>
        <p>Source: {os.path.basename(csv_file)}</p>
        <p>Total Kernels: {len(kernels)}</p>
        <p>Total Execution Time: {sum(k['duration'] for k in kernels):.3f} ms</p>
    </div>
    
    <h2>üìä Top 20 Longest Running Kernels</h2>
    <div id="chart">
"""
    
    # Add bar chart
    max_duration = max(k['duration'] for k in kernels[:20]) if kernels else 1
    for i, kernel in enumerate(kernels[:20]):
        bar_width = (kernel['duration'] / max_duration) * 400
        html_content += f"""
        <div class="kernel-bar">
            <div class="bar" style="width: {bar_width}px;"></div>
            <span class="kernel-name">{kernel['name'][:50]}... ({kernel['duration']:.3f} ms)</span>
        </div>
"""
    
    # Add detailed table
    html_content += """
    </div>
    
    <h2>üìã Detailed Kernel Information</h2>
    <table>
        <tr>
            <th>Rank</th>
            <th>Kernel Name</th>
            <th>Duration (ms)</th>
            <th>Start Time (ms)</th>
        </tr>
"""
    
    for i, kernel in enumerate(kernels[:50]):  # Top 50 kernels
        html_content += f"""
        <tr>
            <td>{i+1}</td>
            <td>{kernel['name']}</td>
            <td>{kernel['duration']:.6f}</td>
            <td>{kernel['start']:.6f}</td>
        </tr>
"""
    
    html_content += """
    </table>
    
    <h2>üîó Additional Visualization Options</h2>
    <ul>
        <li><strong>Chrome Tracing:</strong> Open <code>chrome://tracing/</code> and load the corresponding .json file</li>
        <li><strong>Perfetto:</strong> Visit <a href="https://ui.perfetto.dev/">https://ui.perfetto.dev/</a> for advanced timeline visualization</li>
        <li><strong>Analysis Scripts:</strong> Use <code>/tools/scripts/analyze_rccl_profile.py</code> for detailed analysis</li>
    </ul>
    
    <footer style="margin-top: 50px; color: #666; font-size: 12px;">
        Generated by RCCL Profiling Visualization Script
    </footer>
</body>
</html>
"""
    
    # Write HTML file
    try:
        with open(output_file, 'w') as f:
            f.write(html_content)
        print(f"‚úÖ HTML visualization created: {output_file}")
        return True
    except Exception as e:
        print(f"Error creating HTML file: {e}")
        return False

def main():
    if len(sys.argv) < 2:
        print("Usage: python3 create_rccl_visualization.py <csv_file> [output_file]")
        print("\nExample:")
        print("  python3 create_rccl_visualization.py /workspace/profiling_results/results.csv")
        sys.exit(1)
    
    csv_file = sys.argv[1]
    output_file = sys.argv[2] if len(sys.argv) > 2 else csv_file.replace('.csv', '_visualization.html')
    
    if not os.path.exists(csv_file):
        print(f"Error: File {csv_file} does not exist")
        sys.exit(1)
    
    print(f"üé® Creating visualization from {csv_file}")
    success = create_simple_html_visualization(csv_file, output_file)
    
    if success:
        print(f"\nüåê Open the following file in your web browser:")
        print(f"   {os.path.abspath(output_file)}")
    else:
        print("‚ùå Failed to create visualization")
        sys.exit(1)

if __name__ == "__main__":
    main()
